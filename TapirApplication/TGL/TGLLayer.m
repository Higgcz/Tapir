//
//  TGLLayer.m
//  TapirApplication
//
//  Created by Vojtech Micka on 27.04.14.
//  Copyright (c) 2014 Vojtech Micka. All rights reserved.
//

#import "TGLLayer.h"
#import "Utilities/TGLShapeNode.h"

@implementation TGLLayer

#pragma mark - Updating

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) updateWithTimeSinceLastUpdate:(CFTimeInterval) deltaTime
////////////////////////////////////////////////////////////////////////////////////////////////
{
    self.updateBlock ( deltaTime, self.node );
}

#pragma mark - Private Setters

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setNode:(TGLShapeNode *) node
////////////////////////////////////////////////////////////////////////////////////////////////
{
    _node = node;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setUpdateBlock:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    _updateBlock = updateBlock;
}

#pragma mark - Initialization & Creation

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layer
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [[TGLLayer alloc] init];
}

#pragma mark Node

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithNode:(TGLShapeNode *) node
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithNode:node andUpdate:nil];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithNode:(TGLShapeNode *) node andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    TGLLayer *layer   = [TGLLayer layer];
    layer.node        = node;
    layer.updateBlock = updateBlock;
    return layer;
}

#pragma mark Rectangle

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithRectangleSize:(CGSize) rectSize fillColor:(SKColor *) fillColor
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithRectangleSize:rectSize fillColor:fillColor strokeColor:nil andUpdate:nil];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithRectangleSize:(CGSize) rectSize fillColor:(SKColor *) fillColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithRectangleSize:rectSize fillColor:fillColor strokeColor:nil andUpdate:updateBlock];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithRectangleSize:(CGSize) rectSize fillColor:(SKColor *) fillColor strokeColor:(SKColor *)strokeColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    TGLLayer *layer   = [TGLLayer layer];
    layer.node        = [TGLShapeNode shapeNodeWithRectangleSize:rectSize fillColor:fillColor strokeColor:strokeColor];
    layer.updateBlock = updateBlock;
    return layer;
}

#pragma mark Circle

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithCircleRadius:(CGFloat) r fillColor:(SKColor *) fillColor
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithCircleRadius:r fillColor:fillColor strokeColor:nil andUpdate:nil];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithCircleRadius:(CGFloat) r fillColor:(SKColor *) fillColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithCircleRadius:r fillColor:fillColor strokeColor:nil andUpdate:updateBlock];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithCircleRadius:(CGFloat) r fillColor:(SKColor *) fillColor strokeColor:(SKColor *) strokeColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    TGLLayer *layer   = [TGLLayer layer];
    layer.node        = [TGLShapeNode shapeNodeWithCircleOfRadius:r fillColor:fillColor strokeColor:strokeColor];
    layer.updateBlock = updateBlock;
    return layer;
}

#pragma mark General Bezier Path

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithBezierPath:(NSBezierPath *) bezierPath fillColor:(SKColor *) fillColor
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithBezierPath:bezierPath fillColor:fillColor strokeColor:nil andUpdate:nil];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithBezierPath:(NSBezierPath *) bezierPath fillColor:(SKColor *) fillColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [TGLLayer layerWithBezierPath:bezierPath fillColor:fillColor strokeColor:nil andUpdate:updateBlock];
}

////////////////////////////////////////////////////////////////////////////////////////////////
+ (TGLLayer *) layerWithBezierPath:(NSBezierPath *) bezierPath fillColor:(SKColor *) fillColor strokeColor:(SKColor *) strokeColor andUpdate:(TGLLayerUpdateBlock) updateBlock
////////////////////////////////////////////////////////////////////////////////////////////////
{
    TGLLayer *layer   = [TGLLayer layer];
    layer.node        = [TGLShapeNode shapeNodeWithBezierPath:bezierPath fillColor:fillColor strokeColor:strokeColor];
    layer.updateBlock = updateBlock;
    return layer;
}


@end
