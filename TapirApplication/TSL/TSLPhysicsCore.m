//
//  TSLPhysicsCore.m
//  TapirApplication
//
//  Created by Vojtech Micka on 27.04.14.
//  Copyright (c) 2014 Vojtech Micka. All rights reserved.
//

#import "TSLPhysicsCore.h"

@interface TSLPhysicsCore ()

- (void) setupWithGridSize:(CGSize) gridSize andCellSize:(CGSize) cellSize;

- (NSUInteger) getIndexFromWorldPoint:(CGPoint) worldPoint;
- (NSUInteger) getIndexFromGridPoint:(CGPoint) gridPoint;

@end

@implementation TSLPhysicsCore {
    
    CGFloat _ratioHeight;
    CGFloat _ratioWidth;
    
}

#pragma mark - Private setters

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setGridSize:(CGSize) gridSize
////////////////////////////////////////////////////////////////////////////////////////////////
{
    _gridSize = gridSize;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setCellSize:(CGSize) cellSize
////////////////////////////////////////////////////////////////////////////////////////////////
{
    _cellSize = cellSize;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (instancetype) initWithGridSize:(CGSize) gridSize andCount:(NSUInteger) count
////////////////////////////////////////////////////////////////////////////////////////////////
{
    self = [super init];
    if (self) {
        CGSize cellSize = CGSizeMake(gridSize.width / count, gridSize.height / count);
        [self setupWithGridSize:gridSize andCellSize:cellSize];
    }
    return self;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (instancetype) initWithGridSize:(CGSize) gridSize andCellSize:(CGSize) cellSize
////////////////////////////////////////////////////////////////////////////////////////////////
{
    self = [super init];
    if (self) {
        [self setupWithGridSize:gridSize andCellSize:cellSize];
    }
    return self;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (void) setupWithGridSize:(CGSize) gridSize andCellSize:(CGSize) cellSize
////////////////////////////////////////////////////////////////////////////////////////////////
{
    self.gridSize = gridSize;
    self.cellSize = cellSize;
    
    _ratioHeight = 1 / cellSize.height;
    _ratioWidth  = 1 / cellSize.width;
    
    NSUInteger size = (gridSize.width / cellSize.width) * (gridSize.height / cellSize.height);
    _grid = [NSMutableArray arrayWithCapacity:size];
    
}

#pragma mark - Math

////////////////////////////////////////////////////////////////////////////////////////////////
- (CGPoint) getWorldPointFromGridPoint:(CGPoint) gridPoint
////////////////////////////////////////////////////////////////////////////////////////////////
{
    CGPoint worldPoint = gridPoint;
    worldPoint.x /= _ratioWidth;
    worldPoint.y /= _ratioHeight;
    return worldPoint;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (CGPoint) getGridPointFromWorldPoint:(CGPoint) worldPoint
////////////////////////////////////////////////////////////////////////////////////////////////
{
    CGPoint gridPoint = worldPoint;
    gridPoint.x *= (int) _ratioWidth;
    gridPoint.y *= (int) _ratioHeight;
    return gridPoint;
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (NSUInteger) getIndexFromWorldPoint:(CGPoint) worldPoint
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [self getIndexFromGridPoint:[self getGridPointFromWorldPoint:worldPoint]];
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (NSUInteger) getIndexFromGridPoint:(CGPoint) gridPoint
////////////////////////////////////////////////////////////////////////////////////////////////
{
    NSUInteger countX = self.gridSize.width / self.cellSize.width;
    return gridPoint.x + countX * gridPoint.y;
}

#pragma mark - Collisions preventing

////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL) isPossibleToMoveObject:(TSLEntity *) anObject toPosition:(CGPoint *) point
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return [self isPossibleToMoveObject:anObject toPosition:point continuously:NO];
}

////////////////////////////////////////////////////////////////////////////////////////////////
- (BOOL) isPossibleToMoveObject:(TSLEntity *) anObject toPosition:(CGPoint *) point continuously:(BOOL) continuously
////////////////////////////////////////////////////////////////////////////////////////////////
{
    return NO;
}

@end
